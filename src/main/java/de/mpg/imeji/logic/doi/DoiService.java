package de.mpg.imeji.logic.doi;

import de.mpg.imeji.exceptions.ImejiException;
import de.mpg.imeji.exceptions.NotAllowedError;
import de.mpg.imeji.exceptions.NotFoundException;
import de.mpg.imeji.exceptions.WorkflowException;
import de.mpg.imeji.logic.config.Imeji;
import de.mpg.imeji.logic.core.collection.CollectionService;
import de.mpg.imeji.logic.doi.util.DOIUtil;
import de.mpg.imeji.logic.model.CollectionImeji;
import de.mpg.imeji.logic.model.Properties.Status;
import de.mpg.imeji.logic.model.User;
import de.mpg.imeji.logic.security.authorization.Authorization;

/**
 * Service for using MPDL DOI Service
 *
 * @author bastiens
 *
 */
public final class DoiService {

  public static final String DOI_URL_RESOLVER = "https://dx.doi.org/";
  private final CollectionService collectionController = new CollectionService();
  private final Authorization authorization = new Authorization();

  /**
   * Add a DOI that is generated by MPDL DOI service to a {@link CollectionImeji}
   *
   * @param collection
   * @param user
   * @throws ImejiException
   */
  public void addMPDLDoiToCollection(CollectionImeji collection, User user) throws ImejiException {
    isValidDOIOperation(collection, user);

    final String doi;
    //If a collection is in status PENDING a draft DOI should be created
    if (collection.getStatus() == Status.PENDING) {
      doi = createDraftMPGDoi(collection);
    } else {
      doi = createNewMPGDoi(collection);
    }

    collection.setDoi(doi);
    collectionController.update(collection, user);
  }

  /**
   * Add a DOI that is provided by a user to a collection
   * 
   * @param doi
   * @param collection
   * @param user
   * @throws ImejiException
   */
  public void addProvidedDoiToCollection(CollectionImeji collection, User user) throws ImejiException {
    isValidDOIOperation(collection, user);
    collectionController.update(collection, user);
  }

  /**
   * Updates the URL and metadata of an existing DOI via the DOI service.
   * 
   * The current collection URL and metadata are used for the update.
   * 
   * @param collection a {@link CollectionImeji} containing the URL and metadata to update.
   * @throws ImejiException if the xml-conversion of the collection fails or the request to the MPG
   *         DOI service fails.
   */
  public void updateDoi(CollectionImeji collection) throws ImejiException {
    final String xml = DOIUtil.convertToXML(collection);
    final String url = getCollectionUrl(collection);

    DOIUtil.makeDOIPostRequest(Imeji.CONFIG.getDoiServiceUrl(), Imeji.CONFIG.getDoiUser(), Imeji.CONFIG.getDoiPassword(), url,
        collection.getDoi(), xml);
  }

  /**
   * Sends a request to the DOI service to create a new DOI.
   * 
   * @param collection a {@link CollectionImeji} containing the URL and metadata to create the DOI
   *        for.
   * @return the created DOI.
   * @throws ImejiException if the creation fails.
   */
  private String createNewMPGDoi(CollectionImeji collection) throws ImejiException {
    final String xml = DOIUtil.convertToXML(collection);
    final String url = getCollectionUrl(collection);

    final String doi =
        DOIUtil.makeDOIPutRequest(Imeji.CONFIG.getDoiServiceUrl(), Imeji.CONFIG.getDoiUser(), Imeji.CONFIG.getDoiPassword(), url, xml);
    return doi;
  }

  /**
   * Sends a request to the DOI service to create a draft DOI.
   * 
   * @param collection a {@link CollectionImeji} containing the URL and metadata to create the DOI
   *        for.
   * @return the created DOI.
   * @throws ImejiException if the creation fails.
   */
  private String createDraftMPGDoi(CollectionImeji collection) throws ImejiException {
    final String xml = DOIUtil.convertToXML(collection);

    final String doi =
        DOIUtil.makeDOIPutRequest(Imeji.CONFIG.getDoiServiceUrl(), Imeji.CONFIG.getDoiUser(), Imeji.CONFIG.getDoiPassword(), null, xml);
    return doi;
  }

  private String getCollectionUrl(CollectionImeji col) {
    return Imeji.PROPERTIES.getApplicationURL() + "collection/" + col.getIdString();
  }

  /**
   * Valid if the user is allowed to add a DOI to this Collection
   *
   * @param coll
   * @param user
   * @throws ImejiException
   */
  private void isValidDOIOperation(CollectionImeji coll, User user) throws ImejiException {
    if (coll == null) {
      throw new NotFoundException("Collection does not exists");
    }
    if (!authorization.administrate(user, coll)) {
      throw new NotAllowedError("You are not allowed to add a DOI to this collection");
    }
    if (!Status.RELEASED.equals(coll.getStatus()) && !Status.PENDING.equals(coll.getStatus())) {
      throw new WorkflowException("Collection must be in state Pending or in state Released to create a DOI", "error_doi_creation");
    }
  }

}
