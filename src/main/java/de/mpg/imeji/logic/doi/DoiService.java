package de.mpg.imeji.logic.doi;

import de.mpg.imeji.exceptions.ImejiException;
import de.mpg.imeji.exceptions.NotAllowedError;
import de.mpg.imeji.exceptions.NotFoundException;
import de.mpg.imeji.exceptions.UnprocessableError;
import de.mpg.imeji.exceptions.WorkflowException;
import de.mpg.imeji.logic.config.Imeji;
import de.mpg.imeji.logic.core.collection.CollectionService;
import de.mpg.imeji.logic.doi.models.DOICollection;
import de.mpg.imeji.logic.doi.util.DOIUtil;
import de.mpg.imeji.logic.model.CollectionImeji;
import de.mpg.imeji.logic.model.User;
import de.mpg.imeji.logic.model.Properties.Status;
import de.mpg.imeji.logic.security.authorization.Authorization;
import de.mpg.imeji.logic.util.StringHelper;

/**
 * Service for using MPDL DOI Service
 *
 * @author bastiens
 *
 */
public final class DoiService {

  public static final String DOI_URL_RESOLVER = "https://dx.doi.org/";
  private final CollectionService collectionController = new CollectionService();
  private final Authorization authorization = new Authorization();

  /**
   * Add a DOI that is generated by MPDL DOI service to a {@link CollectionImeji}
   *
   * @param coll
   * @param user
   * @throws ImejiException
   */
  public void addMPDLDoiToCollection(CollectionImeji coll, User user) throws ImejiException {
    isValidDOIOperation(coll, user);
    final String doiServiceUrl = Imeji.CONFIG.getDoiServiceUrl();
    final String doiUser = Imeji.CONFIG.getDoiUser();
    final String doiPassword = Imeji.CONFIG.getDoiPassword();
    final String doi = getNewMPGDoi(coll, doiServiceUrl, doiUser, doiPassword);
    coll.setDoi(doi);
    collectionController.update(coll, user);
  }

  /**
   * Add a DOI that is provided by a user to a collection
   * 
   * @param doi
   * @param collection
   * @param user
   * @throws ImejiException
   */
  public void addProvidedDoiToCollection(CollectionImeji collection, User user) throws ImejiException {

    isValidDOIOperation(collection, user);
    collectionController.update(collection, user);
  }

  /**
   * Get a DOI for a {@link CollectionImeji} from MPG DOI Server
   *
   * @param col
   * @throws Exception
   */
  private String getNewMPGDoi(CollectionImeji col, String doiServiceUrl, String doiUser, String doiPassword) throws ImejiException {
    final DOICollection dcol = DOIUtil.transformToDO(col);
    final String xml = DOIUtil.convertToXML(dcol);
    final String doi = DOIUtil.makeDOIRequest(doiServiceUrl, doiUser, doiPassword, getCollectionUrl(col), xml);
    return doi;

  }

  private String getCollectionUrl(CollectionImeji col) {
    return Imeji.PROPERTIES.getApplicationURL() + "collection/" + col.getIdString();
  }

  /**
   * Valid if the user is allowed to add a DOI to this Collection
   *
   * @param coll
   * @param user
   * @throws ImejiException
   */
  private void isValidDOIOperation(CollectionImeji coll, User user) throws ImejiException {
    if (coll == null) {
      throw new NotFoundException("Collection does not exists");
    }
    if (!authorization.administrate(user, coll)) {
      throw new NotAllowedError("You are not allowed to add a DOI to this collection");
    }
    if (!Status.RELEASED.equals(coll.getStatus())) {
      throw new WorkflowException("Collection has to be released to create a DOI");
    }
  }

}
